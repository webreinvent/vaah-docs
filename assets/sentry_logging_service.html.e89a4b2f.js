import{_ as p,r as c,o as r,c as u,a as n,d as s,b as a,w as e,e as l}from"./app.62b9cc5c.js";const d={},k=n("h1",{id:"sentry-logging-service",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sentry-logging-service","aria-hidden":"true"},"#"),s(" Sentry Logging Service")],-1),v={class:"custom-container warning"},g=n("p",{class:"custom-container-title"},"Dependencies",-1),m={href:"https://pub.dev/packages/sentry_flutter",target:"_blank",rel:"noopener noreferrer"},h=n("li",null,[n("p",null,"implements LoggingService")],-1),_={class:"custom-container danger"},f=n("p",{class:"custom-container-title"},"Developer Guide",-1),y={class:"table-of-contents"},b=n("h2",{id:"sentryloggingservice",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sentryloggingservice","aria-hidden":"true"},"#"),s(" SentryLoggingService")],-1),w=n("li",null,[n("p",null,"Provides methods which implements sentry services for event, exception, and transaction.")],-1),S=n("h2",{id:"configuration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#configuration","aria-hidden":"true"},"#"),s(" Configuration")],-1),x=l("<ul><li><p>You will have to add sentry dsn in sentryConfig.</p></li><li><p>And you can configure SampleRate to trace uncaught errors. Value of <code>tracesSampleRate</code> (in <code>sentryConfig</code>) can be between 0 and 1. if value of <code>tracesSampleRate</code> is <code>0.4</code> then it will record 40% of uncaught errors, if it&#39;s <code>1</code> it will record 100% of uncaught errors.</p></li></ul>",1),L={href:"https://youtu.be/LWc67Vja5YA",target:"_blank",rel:"noopener noreferrer"},E=l(`<h2 id="source-code" tabindex="-1"><a class="header-anchor" href="#source-code" aria-hidden="true">#</a> Source code</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:sentry_flutter/sentry_flutter.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;./logging_service.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;../models/log.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SentryLoggingService</span> <span class="token keyword">implements</span> <span class="token class-name">LoggingService</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">logEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    required <span class="token class-name">String</span> message<span class="token punctuation">,</span>
    <span class="token class-name">SentryLevel</span><span class="token operator">?</span> level<span class="token punctuation">,</span>
    <span class="token class-name">Object</span><span class="token operator">?</span> data<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">SentryEvent</span> event <span class="token operator">=</span> <span class="token class-name">SentryEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token class-name">SentryMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">:</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Sentry</span><span class="token punctuation">.</span><span class="token function">captureEvent</span><span class="token punctuation">(</span>
      event<span class="token punctuation">,</span>
      hint<span class="token punctuation">:</span> data<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">logException</span><span class="token punctuation">(</span>
    <span class="token keyword">dynamic</span> throwable<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token keyword">dynamic</span> stackTrace<span class="token punctuation">,</span>
    <span class="token keyword">dynamic</span> hint<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Sentry</span><span class="token punctuation">.</span><span class="token function">captureException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">,</span> stackTrace<span class="token punctuation">:</span> stackTrace<span class="token punctuation">,</span> hint<span class="token punctuation">:</span> hint<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">logTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    required <span class="token class-name">Function</span> execute<span class="token punctuation">,</span>
    required <span class="token class-name">TransactionDetails</span> details<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">ISentrySpan</span> transaction <span class="token operator">=</span> <span class="token class-name">Sentry</span><span class="token punctuation">.</span><span class="token function">startTransaction</span><span class="token punctuation">(</span>details<span class="token punctuation">.</span>name<span class="token punctuation">,</span> details<span class="token punctuation">.</span>operation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> transaction<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function C(T,R){const i=c("ExternalLinkIcon"),t=c("RouterLink"),o=c("router-link");return r(),u("div",null,[k,n("div",v,[g,n("ul",null,[n("li",null,[n("p",null,[n("a",m,[s("sentry_flutter"),a(i)])])]),h])]),n("div",_,[f,n("ul",null,[n("li",null,[s("Developer should never use this service directly, use "),a(t,{to:"/vaahflutter/directory_structure/vaahextendflutter/services/logging_library/logging_library.html"},{default:e(()=>[s("Logging Library")]),_:1}),s(" instead.")])])]),n("nav",y,[n("ul",null,[n("li",null,[a(o,{to:"#sentryloggingservice"},{default:e(()=>[s("SentryLoggingService")]),_:1})]),n("li",null,[a(o,{to:"#configuration"},{default:e(()=>[s("Configuration")]),_:1})]),n("li",null,[a(o,{to:"#source-code"},{default:e(()=>[s("Source code")]),_:1})])])]),b,n("ul",null,[n("li",null,[n("p",null,[s("Implements "),a(t,{to:"/vaahflutter/directory_structure/vaahextendflutter/services/logging_library/_cloud/logging_service.html"},{default:e(()=>[s("LoggingService")]),_:1}),s(".")])]),w]),S,n("ul",null,[n("li",null,[n("p",null,[s("To configure sentry for your project you just have to pass sentryConfig in "),a(t,{to:"/vaahflutter/directory_structure/vaahextendflutter/env.html"},{default:e(()=>[s("environment config")]),_:1}),s(".")]),x]),n("li",null,[n("p",null,[s("Check "),n("a",L,[s("this"),a(i)]),s(" video for, how to get config values.")])]),n("li",null,[n("p",null,[s("Check this also for other "),a(t,{to:"/vaahflutter/directory_structure/vaahextendflutter/services/performance_monitoring.html"},{default:e(()=>[s("sentry integration (PERFORMANCE)")]),_:1}),s(".")])])]),E])}const N=p(d,[["render",C],["__file","sentry_logging_service.html.vue"]]);export{N as default};
