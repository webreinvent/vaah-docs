import{_ as u,r as o,o as k,c as r,a as n,d as s,b as a,w as t,e}from"./app.62b9cc5c.js";const d={},v=n("h1",{id:"console-logs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#console-logs","aria-hidden":"true"},"#"),s(" Console Logs")],-1),m={class:"custom-container warning"},g=n("p",{class:"custom-container-title"},"Dependencies",-1),b={href:"https://pub.dev/packages/colorize",target:"_blank",rel:"noopener noreferrer"},f={class:"custom-container danger"},h=n("p",{class:"custom-container-title"},"Developer Guide",-1),y={class:"table-of-contents"},_=e(`<h2 id="log-types" tabindex="-1"><a class="header-anchor" href="#log-types" aria-hidden="true">#</a> Log types</h2><p>Currently, our console logs are of 5 types.</p><ol><li>log</li><li>info</li><li>success</li><li>warning</li><li>danger</li><li>transaction</li></ol><p>Different types will print logs in different colors. the log will be in grey, info in blue, success in green, warning in yellow, and danger will be in red.</p><h2 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies" aria-hidden="true">#</a> Dependencies</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">colorize</span><span class="token punctuation">:</span> ^3.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="use-cases" tabindex="-1"><a class="header-anchor" href="#use-cases" aria-hidden="true">#</a> Use cases</h2><div class="custom-container tip"><p class="custom-container-title">use cases</p><ul><li>To log transaction time</li><li>To see formatted (prettier) objects in the console easily readable by the human eye</li><li>To easily differentiate between different kinds of events.</li></ul></div>`,8),w={id:"internal-use-in-logging-library-dart-only",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#internal-use-in-logging-library-dart-only","aria-hidden":"true"},"#",-1),C=e(`<p>Call static methods of the Console class to log the events.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Message&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Message&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Message&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Message&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">danger</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Message&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p>`,3),q=["src"],z=e(`<p>To print data, as the second argument pass the data</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&quot;first_key&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;value&quot;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&quot;second_key&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;key&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;value&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;key&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;updated_value&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;data&#39;</span></span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line">Â </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p>`,3),D=["src"],L=e(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">logTransaction</span><span class="token punctuation">(</span>
  execute<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  details<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TransactionDetails</span><span class="token punctuation">(</span>
    name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;idle transaction&#39;</span></span><span class="token punctuation">,</span>
    operation<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;idle&#39;</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">logTransaction</span><span class="token punctuation">(</span>
  execute<span class="token punctuation">:</span> <span class="token class-name">Api</span><span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;api.vaah.dev&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  details<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TransactionDetails</span><span class="token punctuation">(</span>
    name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;get root route of vaah api&#39;</span></span><span class="token punctuation">,</span>
    operation<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;read&#39;</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>console.dart</code></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:convert&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:colorize/colorize.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;../models/log.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Console</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_printChunks</span><span class="token punctuation">(</span><span class="token class-name">Colorize</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">RegExp</span> pattern <span class="token operator">=</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;.{1,800}&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 800 is the size of each chunk</span>
    pattern<span class="token punctuation">.</span><span class="token function">allMatches</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>
          <span class="token punctuation">(</span><span class="token class-name">RegExpMatch</span> match<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">debugPrint</span><span class="token punctuation">(</span>
            match<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_printLog</span><span class="token punctuation">(</span><span class="token class-name">Colorize</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_printChunks</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">_parseData</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token operator">?</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">JsonEncoder</span> encoder <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">JsonEncoder</span><span class="token punctuation">.</span><span class="token function">withIndent</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;  &#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> encoder<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">danger</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Cannot parse the data, please check the type of data!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Object</span><span class="token operator">?</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Colorize</span> txt <span class="token operator">=</span> <span class="token class-name">Colorize</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_printLog</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Colorize</span> dataColor <span class="token operator">=</span> <span class="token class-name">Colorize</span><span class="token punctuation">(</span><span class="token function">_parseData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dataColor<span class="token punctuation">.</span><span class="token function">white</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_printLog</span><span class="token punctuation">(</span>dataColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Object</span><span class="token operator">?</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Colorize</span> txt <span class="token operator">=</span> <span class="token class-name">Colorize</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    txt<span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_printLog</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Colorize</span> dataColor <span class="token operator">=</span> <span class="token class-name">Colorize</span><span class="token punctuation">(</span><span class="token function">_parseData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dataColor<span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_printLog</span><span class="token punctuation">(</span>dataColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Object</span><span class="token operator">?</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Colorize</span> txt <span class="token operator">=</span> <span class="token class-name">Colorize</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    txt<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_printLog</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Colorize</span> dataColor <span class="token operator">=</span> <span class="token class-name">Colorize</span><span class="token punctuation">(</span><span class="token function">_parseData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dataColor<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_printLog</span><span class="token punctuation">(</span>dataColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">warning</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Object</span><span class="token operator">?</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Colorize</span> txt <span class="token operator">=</span> <span class="token class-name">Colorize</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    txt<span class="token punctuation">.</span><span class="token function">yellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_printLog</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Colorize</span> dataColor <span class="token operator">=</span> <span class="token class-name">Colorize</span><span class="token punctuation">(</span><span class="token function">_parseData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dataColor<span class="token punctuation">.</span><span class="token function">yellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_printLog</span><span class="token punctuation">(</span>dataColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">danger</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Object</span><span class="token operator">?</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Colorize</span> txt <span class="token operator">=</span> <span class="token class-name">Colorize</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    txt<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_printLog</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Colorize</span> dataColor <span class="token operator">=</span> <span class="token class-name">Colorize</span><span class="token punctuation">(</span><span class="token function">_parseData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dataColor<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_printLog</span><span class="token punctuation">(</span>dataColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">logTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    required <span class="token class-name">Function</span> execute<span class="token punctuation">,</span>
    required <span class="token class-name">TransactionDetails</span> details<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">DateTime</span> start <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">DateTime</span> end <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> diff <span class="token operator">=</span> end<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">success</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;------------- execution details -------------&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Transaction Name: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">details<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string"> | Operation: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">details<span class="token punctuation">.</span>operation</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> details<span class="token punctuation">.</span>description <span class="token operator">&amp;&amp;</span> details<span class="token punctuation">.</span>description<span class="token operator">!</span><span class="token punctuation">.</span>isNotEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Description: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">details<span class="token punctuation">.</span>description</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Execution time in milliseconds: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">diff<span class="token punctuation">.</span>inMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function T(c,E){const i=o("ExternalLinkIcon"),l=o("RouterLink"),p=o("router-link");return k(),r("div",null,[v,n("div",m,[g,n("ul",null,[n("li",null,[n("a",b,[s("colorize: ^3.0.0"),a(i)])])])]),n("div",f,[h,n("ul",null,[n("li",null,[s("Developer should never use this directly, use "),a(l,{to:"/vaahflutter/directory_structure/vaahextendflutter/services/logging_library/logging_library.html"},{default:t(()=>[s("Logging Library")]),_:1}),s(" instead.")])])]),n("nav",y,[n("ul",null,[n("li",null,[a(p,{to:"#log-types"},{default:t(()=>[s("Log types")]),_:1})]),n("li",null,[a(p,{to:"#dependencies"},{default:t(()=>[s("Dependencies")]),_:1})]),n("li",null,[a(p,{to:"#use-cases"},{default:t(()=>[s("Use cases")]),_:1})]),n("li",null,[a(p,{to:"#internal-use-in-logging-library-dart-only"},{default:t(()=>[s("Internal use (in logging_library.dart only)")]),_:1})])])]),_,n("h2",w,[x,s(" Internal use (in "),a(l,{to:"/vaahflutter/directory_structure/vaahextendflutter/services/logging_library/logging_library.html"},{default:t(()=>[s("logging_library.dart")]),_:1}),s(" only)")]),C,n("img",{src:c.$withBase("/images/flutter/components/log/log-type.png"),alt:"Output"},null,8,q),z,n("img",{src:c.$withBase("/images/flutter/components/log/prettier-log.png"),alt:"Output"},null,8,D),L])}const S=u(d,[["render",T],["__file","console_service.html.vue"]]);export{S as default};
