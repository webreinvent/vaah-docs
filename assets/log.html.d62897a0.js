import{_ as u,r as o,o as r,c as d,a as n,d as s,b as a,w as e,e as i}from"./app.ba077105.js";const k={},g=n("h1",{id:"debug-logs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#debug-logs","aria-hidden":"true"},"#"),s(" Debug Logs")],-1),h={class:"custom-container warning"},m=n("p",{class:"custom-container-title"},"Dependencies",-1),v={href:"https://pub.dev/packages/colorize",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,[n("p",null,"Log uses EnvironmentConfig, So it depends on the env.dart file.")],-1),b={class:"table-of-contents"},f=n("h2",{id:"log-types",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#log-types","aria-hidden":"true"},"#"),s(" Log types")],-1),y=n("p",null,"Currently, our console logs are of 5 types.",-1),w=n("ol",null,[n("li",null,"log"),n("li",null,"info"),n("li",null,"success"),n("li",null,"warning"),n("li",null,"danger")],-1),q=n("p",null,"Different types will print logs in different colors. the log will be in grey, info in blue, success in green, warning in yellow, and danger will be in red.",-1),x={class:"custom-container danger"},C=n("p",{class:"custom-container-title"},"Note:",-1),L=n("p",null,"The log will check the below variable, if it's set to false then no log will be printed. So make sure your environment variable is set to true if you want to log events.",-1),M=n("p",null,[n("code",null,"EnvironmentConfig.enableConsoleLogs")],-1),S=i(`<h2 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies" aria-hidden="true">#</a> Dependencies</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">colorize</span><span class="token punctuation">:</span> ^3.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="use-cases" tabindex="-1"><a class="header-anchor" href="#use-cases" aria-hidden="true">#</a> Use cases</h2><div class="custom-container tip"><p class="custom-container-title">use cases</p><ul><li>To see formatted (prettier) objects in the console easily readable by the human eye</li><li>To easily differentiate between different kinds of events.</li></ul></div><h2 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use" aria-hidden="true">#</a> How to use</h2><p>Step 1: Import console.dart file using the below command.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;vaahextendflutter/helpers/console.dart&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Step 2: Call static methods of the Console class to log the events.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Message&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Message&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Message&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Message&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">danger</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Message&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p>`,10),B=["src"],D=i(`<p>To print data, as the second argument pass the data</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&quot;first_key&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;value&quot;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&quot;second_key&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;key&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;value&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;key&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;updated_value&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;data&#39;</span></span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line">Â </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p>`,3),E=["src"];function N(l,T){const p=o("ExternalLinkIcon"),t=o("router-link"),c=o("RouterLink");return r(),d("div",null,[g,n("div",h,[m,n("ul",null,[n("li",null,[n("p",null,[n("a",v,[s("colorize: ^3.0.0"),a(p)])])]),_])]),n("nav",b,[n("ul",null,[n("li",null,[a(t,{to:"#log-types"},{default:e(()=>[s("Log types")]),_:1})]),n("li",null,[a(t,{to:"#dependencies"},{default:e(()=>[s("Dependencies")]),_:1})]),n("li",null,[a(t,{to:"#use-cases"},{default:e(()=>[s("Use cases")]),_:1})]),n("li",null,[a(t,{to:"#how-to-use"},{default:e(()=>[s("How to use")]),_:1})])])]),f,y,w,q,n("div",x,[C,L,M,n("p",null,[s("For more details check "),a(c,{to:"/vaahflutter/core/environments.html"},{default:e(()=>[s("environments.md")]),_:1})])]),S,n("img",{src:l.$withBase("/images/flutter/components/log/log-type.png"),alt:"Output"},null,8,B),D,n("img",{src:l.$withBase("/images/flutter/components/log/prettier-log.png"),alt:"Output"},null,8,E)])}const V=u(k,[["render",N],["__file","log.html.vue"]]);export{V as default};
