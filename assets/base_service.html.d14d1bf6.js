import{_ as c,r as o,o as p,c as l,a as n,b as a,w as e,d as s,e as r}from"./app.62b9cc5c.js";const u={},d=n("h1",{id:"base-service",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#base-service","aria-hidden":"true"},"#"),s(" Base Service")],-1),k={class:"table-of-contents"},v=n("ul",null,[n("li",null,"The base service file provides the foundation for implementing different internal notification services. It defines the InternalNotificationsService abstract class, which outlines the required methods and properties that specific services must implement.")],-1),m=n("p",null,"Here's an overview of the class structure:",-1),f=n("h2",{id:"internalnotificationsservice-class",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#internalnotificationsservice-class","aria-hidden":"true"},"#"),s(" InternalNotificationsService Class")],-1),h=n("h3",{id:"implementing-internal-notifications-service",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#implementing-internal-notifications-service","aria-hidden":"true"},"#"),s(" Implementing Internal Notifications Service")],-1),b=n("p",null,"To create a specific internal notifications service, follow these steps:",-1),_=n("li",null,[n("p",null,"Create a new service file that implements the InternalNotificationsService abstract class.")],-1),g=n("li",null,[n("p",null,"Customize the properties (pendingNotificationsCountStream, notificationsStream, notifications) to provide the necessary functionality specific to your service.")],-1),y=r(`<div class="custom-container tip"><p class="custom-container-title">Note:</p><p>Ensure that the implemented service file is correctly imported and accessible within the application&#39;s file structure.</p></div><h2 id="source-code" tabindex="-1"><a class="header-anchor" href="#source-code" aria-hidden="true">#</a> Source Code</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:async&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;../../models/notification.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InternalNotificationsService</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> pendingNotificationsCountStream <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">InternalNotification</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> notificationsStream <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InternalNotification</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> notifications <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userIds<span class="token punctuation">,</span> <span class="token class-name">InternalNotification</span> notification<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function w(S,N){const t=o("router-link"),i=o("RouterLink");return p(),l("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(t,{to:"#internalnotificationsservice-class"},{default:e(()=>[s("InternalNotificationsService Class")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#implementing-internal-notifications-service"},{default:e(()=>[s("Implementing Internal Notifications Service")]),_:1})])])]),n("li",null,[a(t,{to:"#source-code"},{default:e(()=>[s("Source Code")]),_:1})])])]),v,m,f,n("ul",null,[n("li",null,[s("The InternalNotificationsService abstract class serves as a blueprint for internal notification services. It provides the members listed "),a(i,{to:"/vaahflutter/directory_structure/vaahextendflutter/services/notification/internal/notification.html#internalnotifications-class"},{default:e(()=>[s("here")]),_:1}),s(".")])]),h,b,n("ol",null,[_,n("li",null,[n("p",null,[s("Override the empty methods (init(), dispose(), subscribe(), unsubscribe(), push()) according to the requirements of your chosen service provider (e.g., We have already provided code for services like: Firebase and Pusher. You can refere that when you try to "),a(i,{to:"/vaahflutter/directory_structure/vaahextendflutter/services/notification/internal/notification.html#creating-a-new-service-for-your-project"},{default:e(()=>[s("implement your own service")]),_:1}),s(").")])]),g]),y])}const x=c(u,[["render",w],["__file","base_service.html.vue"]]);export{x as default};
