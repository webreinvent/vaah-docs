get:
  tags:
    - Brands
  summary: Get list of all brands
  description: Retrieve list of all the brands.
  operationId: getBrands
  parameters:
    - '$ref': '../vaahstore.yaml#/components/parameters/page'
    - '$ref': '../vaahstore.yaml#/components/parameters/rows'
    - '$ref': '../vaahstore.yaml#/components/parameters/filter_q'
    - '$ref': '../vaahstore.yaml#/components/parameters/filter_is_active'
    - '$ref': '../vaahstore.yaml#/components/parameters/filter_trashed'
    - '$ref': '../vaahstore.yaml#/components/parameters/filter_date'
    - '$ref': '../vaahstore.yaml#/components/parameters/status'





  responses:
    '200':
      description: List retrieved Successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              current_page:
                type: integer
                example: 1
              data:
                type: array
                items:
                  '$ref': '../vaahstore.yaml#/components/schemas/Brand'
              first_page_url:
                type: string
                example: "http://127.0.0.1:8000/backend/store/brands?page=1"

    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:

post:
  tags:
    - Brands
  summary: "Create a brand"
  operationId: "createItem"
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            name:
              type: string
              description: Name of the brand
            slug:
              type: string
              description: Slug for the brand (URL-friendly identifier)
            status:
              type: object
              description: Status details of the brand
              properties:
                id:
                  type: integer
                  description: ID of the status
              required:
                - id
            image:
              type: string
              nullable: true
              description: Image file name or URL for the brand
            is_active:
              type: integer
              description: Indicates if the brand is active (1 = active, 0 = inactive)
              example: 1
            meta_title:
              type: string
              description: SEO title for the brand
              example: "samsung"
            meta_description:
              type: string
              description: SEO description for the brand
              example: "as"
            meta_keywords:
              type: array
              items:
                type: string
              description: SEO keywords for the brand
              example: [ "as", "as" ]
            status_notes:
              type: string
              nullable: true
              description: Notes regarding the status of the brand
              example: "Hello"
            registered_at:
              type: string
              format: date-time
              description: Date and time when the brand was registered
              example: "2024-10-07T06:37:58.000Z"
            registered_by:
              type: integer
              description: ID of the user who registered the brand
              example: 1
            approved_at:
              type: string
              format: date-time
              description: Date and time when the brand was approved
              example: "2024-10-07T06:37:58.000Z"
            approved_by:
              type: integer
              description: ID of the user who approved the brand
              example: 1
          required:
            - name
            - slug
            - status

  responses:
    '200':
      description: "Brand created successfully"
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              messages:
                type: array
                items:
                  type: string
                example: [
                    "Saved successfully"
                ]
              data:
                $ref: '../vaahstore.yaml#/components/schemas/Brand'
    '400':
      description: "Validation error"
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              errors:
                type: array
                items:
                  type: string
                example: [
                    "Brand already exists for this variation."
                ]
    '409':
      description: "Conflict error if brand already exists"
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              errors:
                type: array
                items:
                  type: string
                example: [
                    "Brand already exists for this variation."
                ]
put:
  tags:
    - Brands
  summary: Update a list of brands
  description: This endpoint allows you to update multiple brands records based on the provided input, including actions like activating, deactivating, trashing, or restoring brands.
  operationId: updateBrandsList
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          required:
            - type
            - items
          properties:
            type:
              type: string
              description: Action type (e.g., "activate", "deactivate", "trash", "restore").
              example: "trash"
            items:
              type: array
              items:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: integer
                    description: The ID of the brands to be updated.
                    example: 1  # Example for a single item
              example: # Example for the entire array
                - id: 1
                - id: 2
                - id: 3
  responses:
    '200':
      description: Action was successful and the specified brands have been updated.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: boolean
                example: true
              messages:
                type: array
                items:
                  type: string
                  example: "Action was successful."
    '403':
      description: The user does not have permission to perform this action.
      content:
        application/json:
          schema:
            type: object
            properties:
              failed:
                type: boolean
                example: true
              messages:
                type: array
                items:
                  type: string
                  example: "Permission denied for action 'can-update-module'."
    '400':
      description: Validation failed for the input parameters.
      content:
        application/json:
          schema:
            type: object
            properties:
              failed:
                type: boolean
                example: true
              messages:
                type: array
                items:
                  type: string
                example:
                  - "Action type is required."

    '500':
      description: An unexpected error occurred during the update process.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              errors:
                type: array
                items:
                  type: string
                  example: "An unexpected error occurred."
delete:
  tags:
    - Brands
  summary: Delete a list of brands
  description: This endpoint allows you to delete multiple brands records based on the provided input.
  operationId: deleteBrandssList
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          required:
            - type
            - items
          properties:
            type:
              type: string
              description: Action type (e.g., "delete").
              example: "delete"
            items:
              type: array
              items:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: integer
                    description: The ID of the brands to be deleted.
                    example: 1  # Example for a single item
              example: # Example for the entire array
                - id: 1
                - id: 2
                - id: 3
  responses:
    '200':
      description: Action was successful and the specified brands have been deleted.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: boolean
                example: true
              messages:
                type: array
                items:
                  type: string
                  example: "Action was successful."
    '403':
      description: The user does not have permission to perform this action.
      content:
        application/json:
          schema:
            type: object
            properties:
              failed:
                type: boolean
                example: true
              messages:
                type: array
                items:
                  type: string
                  example: "Permission denied for action 'can-update-module'."
    '400':
      description: Validation failed for the input parameters.
      content:
        application/json:
          schema:
            type: object
            properties:
              failed:
                type: boolean
                example: true
              messages:
                type: array
                items:
                  type: string
                example:
                  - "Action type is required."
                  - "Select items."


    '500':
      description: An unexpected error occurred during the deletion process.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              errors:
                type: array
                items:
                  type: string
                  example: "An unexpected error occurred."
